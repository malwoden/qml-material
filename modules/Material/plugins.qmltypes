import QtQuick.tooling 1.1

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -notrelocatable Material 0.1 .'

Module {
    Component {
        prototype: "QObject"
        name: "Material/Action"
        exports: ["Material/Action 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        Property { name: "enabled"; type: "bool" }
        Property { name: "hasDividerAfter"; type: "bool" }
        Property { name: "iconName"; type: "string" }
        Property { name: "iconSource"; type: "string" }
        Property { name: "keybinding"; type: "string" }
        Property { name: "name"; type: "string" }
        Property { name: "summary"; type: "string" }
        Property { name: "visible"; type: "bool" }
        Property { name: "hoverAnimation"; type: "bool" }
        Signal {
            name: "triggered"
            Parameter { name: "caller"; type: "QVariant" }
        }
    }
    Component {
        prototype: "QQuickItem"
        name: "Material/ActionBar"
        exports: ["Material/ActionBar 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
        Property { name: "actions"; type: "Action_QMLTYPE_0"; isList: true; isReadonly: true }
        Property { name: "backAction"; type: "Action_QMLTYPE_0"; isPointer: true }
        Property { name: "backgroundColor"; type: "QColor" }
        Property { name: "elevation"; type: "int" }
        Property { name: "extendedHeight"; type: "int"; isReadonly: true }
        Property { name: "hidden"; type: "bool" }
        Property { name: "maxActionCount"; type: "int" }
        Property { name: "title"; type: "string" }
        Property { name: "toolbar"; type: "QQuickItem"; isPointer: true }
        Property { name: "overflowMenuAvailable"; type: "bool"; isReadonly: true }
        Property { name: "customContent"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "extendedContent"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "overflowMenuShowing"; type: "bool"; isReadonly: true }
        Method { name: "openOverflowMenu"; type: "QVariant" }
        Method { name: "closeOverflowMenu"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "Material/ActionButton"
        exports: ["Material/ActionButton 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
        Property { name: "backgroundColor"; type: "QColor" }
        Property { name: "elevation"; type: "int" }
        Property { name: "iconColor"; type: "QColor" }
        Property { name: "iconName"; type: "string" }
        Property { name: "isMiniSize"; type: "bool" }
        Property { name: "isDefault"; type: "bool" }
        Property { name: "menu"; type: "Menu_QMLTYPE_71"; isPointer: true }
        Property { name: "checkable"; type: "bool" }
        Property { name: "checked"; type: "bool" }
        Property { name: "exclusiveGroup"; type: "QQuickExclusiveGroup"; isPointer: true }
        Property { name: "action"; type: "QQuickAction"; isPointer: true }
        Property { name: "activeFocusOnPress"; type: "bool" }
        Property { name: "text"; type: "string" }
        Property { name: "tooltip"; type: "string" }
        Property { name: "iconSource"; type: "QUrl" }
        Property { name: "__position"; type: "string" }
        Property { name: "__iconOverriden"; type: "bool"; isReadonly: true }
        Property { name: "__action"; type: "QQuickAction"; isPointer: true }
        Property { name: "__iconAction"; type: "QQuickAction"; isReadonly: true; isPointer: true }
        Property { name: "__effectivePressed"; type: "bool" }
        Property { name: "__behavior"; type: "QVariant" }
        Property { name: "pressed"; type: "bool"; isReadonly: true }
        Property { name: "hovered"; type: "bool"; isReadonly: true }
        Signal { name: "clicked" }
        Method { name: "accessiblePressAction"; type: "QVariant" }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__style"; type: "QObject"; isPointer: true }
        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
        Property { name: "styleHints"; type: "QVariant" }
        Property { name: "__styleData"; type: "QObject"; isPointer: true }
    }
    Component {
        prototype: "QObject"
        name: "Material/AppTheme"
        exports: ["Material/AppTheme 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        Property { name: "accentColor"; type: "QColor" }
        Property { name: "backgroundColor"; type: "QColor" }
        Property { name: "tabHighlightColor"; type: "QColor" }
        Property { name: "primaryColor"; type: "QColor" }
        Property { name: "primaryDarkColor"; type: "QColor" }
    }
    Component {
        prototype: "QObject"
        name: "Material/ApplicationWindow"
        exports: ["Material/ApplicationWindow 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
        Property { name: "clientSideDecorations"; type: "bool" }
        Property { name: "initialPage"; type: "QVariant" }
        Property { name: "pageStack"; type: "PageStack_QMLTYPE_90"; isReadonly: true; isPointer: true }
        Property { name: "theme"; type: "AppTheme_QMLTYPE_82"; isReadonly: true; isPointer: true }
        Property { name: "menuBar"; type: "MenuBar_QMLTYPE_93"; isPointer: true }
        Property { name: "toolBar"; type: "QQuickItem"; isPointer: true }
        Property { name: "statusBar"; type: "QQuickItem"; isPointer: true }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__topBottomMargins"; type: "double" }
        Property { name: "__qwindowsize_max"; type: "double"; isReadonly: true }
        Property { name: "__width"; type: "double" }
        Property { name: "__height"; type: "double" }
        Property {
            name: "contentItem"
            type: "ContentItem_QMLTYPE_92"
            isReadonly: true
            isPointer: true
        }
        Property { name: "__style"; type: "QObject"; isReadonly: true; isPointer: true }
        Property { name: "__panel"; type: "QObject"; isReadonly: true; isPointer: true }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "visible"; type: "bool" }
        Property { name: "visibility"; type: "Visibility" }
        Signal {
            name: "visibleChanged"
            Parameter { name: "arg"; type: "bool" }
        }
        Signal {
            name: "visibilityChanged"
            Parameter { name: "visibility"; type: "QWindow::Visibility" }
        }
        Property { name: "color"; type: "QColor" }
        Property {
            name: "activeFocusItem"
            revision: 1
            type: "QQuickItem"
            isReadonly: true
            isPointer: true
        }
        Signal { name: "frameSwapped" }
        Signal {
            name: "openglContextCreated"
            revision: 2
            Parameter { name: "context"; type: "QOpenGLContext"; isPointer: true }
        }
        Signal { name: "sceneGraphInitialized" }
        Signal { name: "sceneGraphInvalidated" }
        Signal { name: "beforeSynchronizing" }
        Signal { name: "afterSynchronizing"; revision: 2 }
        Signal { name: "beforeRendering" }
        Signal { name: "afterRendering" }
        Signal { name: "afterAnimating"; revision: 2 }
        Signal { name: "sceneGraphAboutToStop"; revision: 2 }
        Signal {
            name: "closing"
            revision: 1
            Parameter { name: "close"; type: "QQuickCloseEvent"; isPointer: true }
        }
        Signal {
            name: "colorChanged"
            Parameter { type: "QColor" }
        }
        Signal {
            name: "sceneGraphError"
            revision: 2
            Parameter { name: "error"; type: "QQuickWindow::SceneGraphError" }
            Parameter { name: "message"; type: "string" }
        }
        Method { name: "update" }
        Method { name: "releaseResources" }
        Property { name: "title"; type: "string" }
        Property { name: "modality"; type: "Qt::WindowModality" }
        Property { name: "flags"; type: "Qt::WindowFlags" }
        Property { name: "x"; type: "int" }
        Property { name: "y"; type: "int" }
        Property { name: "width"; type: "int" }
        Property { name: "height"; type: "int" }
        Property { name: "minimumWidth"; type: "int" }
        Property { name: "minimumHeight"; type: "int" }
        Property { name: "maximumWidth"; type: "int" }
        Property { name: "maximumHeight"; type: "int" }
        Property { name: "active"; revision: 1; type: "bool"; isReadonly: true }
        Property { name: "contentOrientation"; type: "Qt::ScreenOrientation" }
        Property { name: "opacity"; revision: 1; type: "double" }
        Signal {
            name: "screenChanged"
            Parameter { name: "screen"; type: "QScreen"; isPointer: true }
        }
        Signal {
            name: "modalityChanged"
            Parameter { name: "modality"; type: "Qt::WindowModality" }
        }
        Signal {
            name: "windowStateChanged"
            Parameter { name: "windowState"; type: "Qt::WindowState" }
        }
        Signal {
            name: "windowTitleChanged"
            revision: 2
            Parameter { name: "title"; type: "string" }
        }
        Signal {
            name: "xChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "yChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "widthChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "heightChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "minimumWidthChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "minimumHeightChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "maximumWidthChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "maximumHeightChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "contentOrientationChanged"
            Parameter { name: "orientation"; type: "Qt::ScreenOrientation" }
        }
        Signal {
            name: "focusObjectChanged"
            Parameter { name: "object"; type: "QObject"; isPointer: true }
        }
        Signal {
            name: "opacityChanged"
            revision: 1
            Parameter { name: "opacity"; type: "double" }
        }
        Method { name: "requestActivate"; revision: 1 }
        Method {
            name: "setVisible"
            Parameter { name: "visible"; type: "bool" }
        }
        Method { name: "show" }
        Method { name: "hide" }
        Method { name: "showMinimized" }
        Method { name: "showMaximized" }
        Method { name: "showFullScreen" }
        Method { name: "showNormal" }
        Method { name: "close"; type: "bool" }
        Method { name: "raise" }
        Method { name: "lower" }
        Method {
            name: "setTitle"
            Parameter { type: "string" }
        }
        Method {
            name: "setX"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setY"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setWidth"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setHeight"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setMinimumWidth"
            Parameter { name: "w"; type: "int" }
        }
        Method {
            name: "setMinimumHeight"
            Parameter { name: "h"; type: "int" }
        }
        Method {
            name: "setMaximumWidth"
            Parameter { name: "w"; type: "int" }
        }
        Method {
            name: "setMaximumHeight"
            Parameter { name: "h"; type: "int" }
        }
        Method {
            name: "alert"
            revision: 1
            Parameter { name: "msec"; type: "int" }
        }
    }
    Component {
        prototype: "QQuickItem"
        name: "Material/AwesomeIcon"
        exports: ["Material/AwesomeIcon 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
        Property { name: "name"; type: "string" }
        Property { name: "rotate"; type: "bool" }
        Property { name: "valid"; type: "bool" }
        Property { name: "size"; type: "int" }
        Property { name: "shadow"; type: "bool" }
        Property { name: "icons"; type: "QVariant" }
        Property { name: "color"; type: "QColor" }
        Property { name: "weight"; type: "int" }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "Material/BottomActionSheet"
        exports: ["Material/BottomActionSheet 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "content"
        Property { name: "actions"; type: "Action_QMLTYPE_0"; isList: true; isReadonly: true }
        Property { name: "title"; type: "string" }
        Property { name: "maxHeight"; type: "int" }
        Property { name: "percentOpen"; type: "double" }
        Property { name: "content"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "overlayColor"; type: "QColor" }
        Property { name: "overlayLayer"; type: "string" }
        Property { name: "globalMouseAreaEnabled"; type: "bool" }
        Property { name: "dismissOnTap"; type: "bool" }
        Property { name: "showing"; type: "bool" }
        Property { name: "__lastFocusedItem"; type: "QQuickItem"; isPointer: true }
        Signal { name: "opened" }
        Signal { name: "closed" }
        Method {
            name: "toggle"
            type: "QVariant"
            Parameter { name: "widget"; type: "QVariant" }
        }
        Method { name: "open"; type: "QVariant" }
        Method { name: "close"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "Material/BottomSheet"
        exports: ["Material/BottomSheet 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "content"
        Property { name: "maxHeight"; type: "int" }
        Property { name: "percentOpen"; type: "double" }
        Property { name: "content"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "overlayColor"; type: "QColor" }
        Property { name: "overlayLayer"; type: "string" }
        Property { name: "globalMouseAreaEnabled"; type: "bool" }
        Property { name: "dismissOnTap"; type: "bool" }
        Property { name: "showing"; type: "bool" }
        Property { name: "__lastFocusedItem"; type: "QQuickItem"; isPointer: true }
        Signal { name: "opened" }
        Signal { name: "closed" }
        Method {
            name: "toggle"
            type: "QVariant"
            Parameter { name: "widget"; type: "QVariant" }
        }
        Method { name: "open"; type: "QVariant" }
        Method { name: "close"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "Material/Button"
        exports: ["Material/Button 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
        Property { name: "backgroundColor"; type: "QColor" }
        Property { name: "context"; type: "string" }
        Property { name: "darkBackground"; type: "bool" }
        Property { name: "elevation"; type: "int" }
        Property { name: "textColor"; type: "QColor" }
        Property { name: "isDefault"; type: "bool" }
        Property { name: "menu"; type: "Menu_QMLTYPE_71"; isPointer: true }
        Property { name: "checkable"; type: "bool" }
        Property { name: "checked"; type: "bool" }
        Property { name: "exclusiveGroup"; type: "QQuickExclusiveGroup"; isPointer: true }
        Property { name: "action"; type: "QQuickAction"; isPointer: true }
        Property { name: "activeFocusOnPress"; type: "bool" }
        Property { name: "text"; type: "string" }
        Property { name: "tooltip"; type: "string" }
        Property { name: "iconSource"; type: "QUrl" }
        Property { name: "iconName"; type: "string" }
        Property { name: "__position"; type: "string" }
        Property { name: "__iconOverriden"; type: "bool"; isReadonly: true }
        Property { name: "__action"; type: "QQuickAction"; isPointer: true }
        Property { name: "__iconAction"; type: "QQuickAction"; isReadonly: true; isPointer: true }
        Property { name: "__effectivePressed"; type: "bool" }
        Property { name: "__behavior"; type: "QVariant" }
        Property { name: "pressed"; type: "bool"; isReadonly: true }
        Property { name: "hovered"; type: "bool"; isReadonly: true }
        Signal { name: "clicked" }
        Method { name: "accessiblePressAction"; type: "QVariant" }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__style"; type: "QObject"; isPointer: true }
        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
        Property { name: "styleHints"; type: "QVariant" }
        Property { name: "__styleData"; type: "QObject"; isPointer: true }
    }
    Component {
        prototype: "QQuickItem"
        name: "Material/Card"
        exports: ["Material/Card 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
        Property { name: "flat"; type: "bool" }
        Property { name: "elevation"; type: "int" }
        Property { name: "radius"; type: "double" }
        Property { name: "style"; type: "string" }
        Property { name: "backgroundColor"; type: "QColor" }
        Property { name: "tintColor"; type: "QColor" }
        Property { name: "fullWidth"; type: "bool" }
        Property { name: "fullHeight"; type: "bool" }
        Property { name: "elevationInverted"; type: "bool" }
        Property { name: "topShadow"; type: "QVariant" }
        Property { name: "bottomShadow"; type: "QVariant" }
        Property { name: "border"; type: "QQuickPen"; isReadonly: true; isPointer: true }
        Property { name: "clipContent"; type: "bool" }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "Material/CheckBox"
        exports: ["Material/CheckBox 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
        Property { name: "color"; type: "QColor" }
        Property { name: "darkBackground"; type: "bool" }
        Property { name: "checkedState"; type: "int" }
        Property { name: "partiallyCheckedEnabled"; type: "bool" }
        Property { name: "__ignoreChecked"; type: "bool" }
        Property { name: "__ignoreCheckedState"; type: "bool" }
        Method { name: "__cycleCheckBoxStates"; type: "QVariant" }
        Property { name: "checked"; type: "bool" }
        Property { name: "activeFocusOnPress"; type: "bool" }
        Property { name: "exclusiveGroup"; type: "QQuickExclusiveGroup"; isPointer: true }
        Property { name: "text"; type: "string" }
        Property { name: "__cycleStatesHandler"; type: "QVariant" }
        Property { name: "pressed"; type: "bool" }
        Property { name: "hovered"; type: "bool"; isReadonly: true }
        Signal { name: "clicked" }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__style"; type: "QObject"; isPointer: true }
        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
        Property { name: "styleHints"; type: "QVariant" }
        Property { name: "__styleData"; type: "QObject"; isPointer: true }
    }
    Component {
        prototype: "QObject"
        name: "Material/Device"
        exports: ["Material/Device 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        isCreatable: false
        isSingleton: true
        defaultProperty: "children"
        Property { name: "type"; type: "int" }
        Property { name: "phone"; type: "int"; isReadonly: true }
        Property { name: "phablet"; type: "int"; isReadonly: true }
        Property { name: "tablet"; type: "int"; isReadonly: true }
        Property { name: "desktop"; type: "int"; isReadonly: true }
        Property { name: "tv"; type: "int"; isReadonly: true }
        Property { name: "unknown"; type: "int"; isReadonly: true }
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "iconName"; type: "string"; isReadonly: true }
        Property { name: "isMobile"; type: "bool"; isReadonly: true }
        Property { name: "__childrenFix"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "children"; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "Material/Dialog"
        exports: ["Material/Dialog 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "dialogContent"
        Property { name: "contentMargins"; type: "int" }
        Property { name: "minimumWidth"; type: "int" }
        Property { name: "negativeButtonText"; type: "string" }
        Property { name: "positiveButtonText"; type: "string" }
        Property { name: "hasActions"; type: "bool" }
        Property { name: "title"; type: "string" }
        Property { name: "text"; type: "string" }
        Property { name: "negativeButton"; type: "Button_QMLTYPE_122"; isReadonly: true; isPointer: true }
        Property { name: "positiveButton"; type: "Button_QMLTYPE_122"; isReadonly: true; isPointer: true }
        Property { name: "positiveButtonEnabled"; type: "bool" }
        Property { name: "dialogContent"; type: "QObject"; isList: true; isReadonly: true }
        Signal { name: "accepted" }
        Signal { name: "rejected" }
        Method {
            name: "closeKeyPressed"
            type: "QVariant"
            Parameter { name: "event"; type: "QVariant" }
        }
        Method { name: "show"; type: "QVariant" }
        Property { name: "overlayColor"; type: "QColor" }
        Property { name: "overlayLayer"; type: "string" }
        Property { name: "globalMouseAreaEnabled"; type: "bool" }
        Property { name: "dismissOnTap"; type: "bool" }
        Property { name: "showing"; type: "bool" }
        Property { name: "__lastFocusedItem"; type: "QQuickItem"; isPointer: true }
        Signal { name: "opened" }
        Signal { name: "closed" }
        Method {
            name: "toggle"
            type: "QVariant"
            Parameter { name: "widget"; type: "QVariant" }
        }
        Method { name: "open"; type: "QVariant" }
        Method { name: "close"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "Material/Dropdown"
        exports: ["Material/Dropdown 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
        Property { name: "anchor"; type: "int" }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "internalView"; type: "View_QMLTYPE_21"; isReadonly: true; isPointer: true }
        Method {
            name: "open"
            type: "QVariant"
            Parameter { name: "caller"; type: "QVariant" }
            Parameter { name: "offsetX"; type: "QVariant" }
            Parameter { name: "offsetY"; type: "QVariant" }
        }
        Property { name: "overlayColor"; type: "QColor" }
        Property { name: "overlayLayer"; type: "string" }
        Property { name: "globalMouseAreaEnabled"; type: "bool" }
        Property { name: "dismissOnTap"; type: "bool" }
        Property { name: "showing"; type: "bool" }
        Property { name: "__lastFocusedItem"; type: "QQuickItem"; isPointer: true }
        Signal { name: "opened" }
        Signal { name: "closed" }
        Method {
            name: "toggle"
            type: "QVariant"
            Parameter { name: "widget"; type: "QVariant" }
        }
        Method { name: "open"; type: "QVariant" }
        Method { name: "close"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "Material/Icon"
        exports: ["Material/Icon 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
        Property { name: "color"; type: "QColor" }
        Property { name: "size"; type: "double" }
        Property { name: "name"; type: "string" }
        Property { name: "source"; type: "string" }
        Property { name: "valid"; type: "bool" }
        Property { name: "iconDirectory"; type: "QUrl" }
        Property { name: "colorize"; type: "bool" }
    }
    Component {
        prototype: "QQuickItem"
        name: "Material/IconButton"
        exports: ["Material/IconButton 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
        Property { name: "action"; type: "Action_QMLTYPE_0"; isPointer: true }
        Property { name: "iconName"; type: "string" }
        Property { name: "iconSource"; type: "string" }
        Property { name: "hoverAnimation"; type: "bool" }
        Property { name: "color"; type: "QColor" }
        Property { name: "size"; type: "double" }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickMouseArea"
        name: "Material/Ink"
        exports: ["Material/Ink 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
        Property { name: "startRadius"; type: "int" }
        Property { name: "endRadius"; type: "int" }
        Property { name: "currentCircle"; type: "QQuickItem"; isPointer: true }
        Property { name: "color"; type: "QColor" }
        Property { name: "circular"; type: "bool" }
        Property { name: "centered"; type: "bool" }
        Property { name: "focusWidth"; type: "int" }
        Property { name: "focused"; type: "bool" }
        Property { name: "focusColor"; type: "QColor" }
        Property { name: "showFocus"; type: "bool" }
        Method {
            name: "createTapCircle"
            type: "QVariant"
            Parameter { name: "x"; type: "QVariant" }
            Parameter { name: "y"; type: "QVariant" }
        }
        Method {
            name: "radius"
            type: "QVariant"
            Parameter { name: "x"; type: "QVariant" }
            Parameter { name: "y"; type: "QVariant" }
        }
        Method {
            name: "dist"
            type: "QVariant"
            Parameter { name: "x1"; type: "QVariant" }
            Parameter { name: "y1"; type: "QVariant" }
            Parameter { name: "x2"; type: "QVariant" }
            Parameter { name: "y2"; type: "QVariant" }
        }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "Material/InputDialog"
        exports: ["Material/InputDialog 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "dialogContent"
        Property { name: "textField"; type: "TextField_QMLTYPE_154"; isReadonly: true; isPointer: true }
        Property { name: "validator"; type: "QValidator"; isPointer: true }
        Property { name: "inputMask"; type: "string" }
        Property { name: "inputMethodHints"; type: "int" }
        Property { name: "placeholderText"; type: "string" }
        Property { name: "value"; type: "string" }
        Property { name: "contentMargins"; type: "int" }
        Property { name: "minimumWidth"; type: "int" }
        Property { name: "negativeButtonText"; type: "string" }
        Property { name: "positiveButtonText"; type: "string" }
        Property { name: "hasActions"; type: "bool" }
        Property { name: "title"; type: "string" }
        Property { name: "text"; type: "string" }
        Property { name: "negativeButton"; type: "Button_QMLTYPE_122"; isReadonly: true; isPointer: true }
        Property { name: "positiveButton"; type: "Button_QMLTYPE_122"; isReadonly: true; isPointer: true }
        Property { name: "positiveButtonEnabled"; type: "bool" }
        Property { name: "dialogContent"; type: "QObject"; isList: true; isReadonly: true }
        Signal { name: "accepted" }
        Signal { name: "rejected" }
        Method {
            name: "closeKeyPressed"
            type: "QVariant"
            Parameter { name: "event"; type: "QVariant" }
        }
        Method { name: "show"; type: "QVariant" }
        Property { name: "overlayColor"; type: "QColor" }
        Property { name: "overlayLayer"; type: "string" }
        Property { name: "globalMouseAreaEnabled"; type: "bool" }
        Property { name: "dismissOnTap"; type: "bool" }
        Property { name: "showing"; type: "bool" }
        Property { name: "__lastFocusedItem"; type: "QQuickItem"; isPointer: true }
        Signal { name: "opened" }
        Signal { name: "closed" }
        Method {
            name: "toggle"
            type: "QVariant"
            Parameter { name: "widget"; type: "QVariant" }
        }
        Method { name: "open"; type: "QVariant" }
        Method { name: "close"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickText"
        name: "Material/Label"
        exports: ["Material/Label 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
        Property { name: "style"; type: "string" }
        Property { name: "fontStyles"; type: "QVariant" }
        Property { name: "fontInfo"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "Material/MainView"
        exports: ["Material/MainView 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
        Property { name: "theme"; type: "AppTheme_QMLTYPE_82"; isReadonly: true; isPointer: true }
    }
    Component {
        prototype: "QObject"
        name: "Material/MaterialAnimation"
        exports: ["Material/MaterialAnimation 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        isCreatable: false
        isSingleton: true
        Property { name: "pageTransitionDuration"; type: "int" }
    }
    Component {
        prototype: "QQuickItem"
        name: "Material/MenuField"
        exports: ["Material/MenuField 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
        Property { name: "accentColor"; type: "QColor" }
        Property { name: "errorColor"; type: "QColor" }
        Property { name: "selectedText"; type: "string"; isReadonly: true }
        Property { name: "maxVisibleItems"; type: "int" }
        Property { name: "floatingLabel"; type: "bool" }
        Property { name: "hasError"; type: "bool" }
        Property { name: "hasHelperText"; type: "bool" }
        Property { name: "inputRect"; type: "QRectF"; isReadonly: true }
        Property { name: "model"; type: "QVariant" }
        Property { name: "selectedIndex"; type: "int" }
        Property { name: "placeholderText"; type: "string" }
        Property { name: "helperText"; type: "string" }
        Signal {
            name: "itemSelected"
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "Material/NavigationDrawer"
        exports: ["Material/NavigationDrawer 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
        Property { name: "mode"; type: "string" }
        Property { name: "action"; type: "Action_QMLTYPE_0"; isReadonly: true; isPointer: true }
        Property { name: "enabled"; type: "bool" }
        Property { name: "overlayColor"; type: "QColor" }
        Property { name: "overlayLayer"; type: "string" }
        Property { name: "globalMouseAreaEnabled"; type: "bool" }
        Property { name: "dismissOnTap"; type: "bool" }
        Property { name: "showing"; type: "bool" }
        Property { name: "__lastFocusedItem"; type: "QQuickItem"; isPointer: true }
        Signal { name: "opened" }
        Signal { name: "closed" }
        Method {
            name: "toggle"
            type: "QVariant"
            Parameter { name: "widget"; type: "QVariant" }
        }
        Method { name: "open"; type: "QVariant" }
        Method { name: "close"; type: "QVariant" }
    }
    Component {
        prototype: "QObject"
        name: "Material/Object"
        exports: ["Material/Object 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "children"
        Property { name: "__childrenFix"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "children"; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        prototype: "QQuickRectangle"
        name: "Material/OverlayLayer"
        exports: ["Material/OverlayLayer 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
        Property { name: "currentOverlay"; type: "QQuickItem"; isPointer: true }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "Material/OverlayView"
        exports: ["Material/OverlayView 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
        Property { name: "sourceView"; type: "QQuickItem"; isPointer: true }
        Property { name: "transitionOpacity"; type: "double" }
        Method {
            name: "open"
            type: "QVariant"
            Parameter { name: "sourceView"; type: "QVariant" }
        }
        Method { name: "close"; type: "QVariant" }
        Property { name: "overlayColor"; type: "QColor" }
        Property { name: "overlayLayer"; type: "string" }
        Property { name: "globalMouseAreaEnabled"; type: "bool" }
        Property { name: "dismissOnTap"; type: "bool" }
        Property { name: "showing"; type: "bool" }
        Property { name: "__lastFocusedItem"; type: "QQuickItem"; isPointer: true }
        Signal { name: "opened" }
        Signal { name: "closed" }
        Method {
            name: "toggle"
            type: "QVariant"
            Parameter { name: "widget"; type: "QVariant" }
        }
        Method { name: "open"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "Material/Page"
        exports: ["Material/Page 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
        Property { name: "actions"; type: "Action_QMLTYPE_0"; isList: true; isReadonly: true }
        Property { name: "backAction"; type: "Action_QMLTYPE_0"; isPointer: true }
        Property { name: "backgroundColor"; type: "QColor" }
        Property { name: "canGoBack"; type: "bool" }
        Property { name: "rightSidebar"; type: "QQuickItem"; isPointer: true }
        Property { name: "selectedTab"; type: "int" }
        Property { name: "title"; type: "string" }
        Property { name: "tabs"; type: "QVariant" }
        Property { name: "actionBar"; type: "ActionBar_QMLTYPE_36"; isReadonly: true; isPointer: true }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Method { name: "pop"; type: "QVariant" }
        Method {
            name: "push"
            type: "QVariant"
            Parameter { name: "component"; type: "QVariant" }
            Parameter { name: "properties"; type: "QVariant" }
        }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "Material/PageSidebar"
        exports: ["Material/PageSidebar 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "sidebar"
        Property { name: "showing"; type: "bool" }
        Property { name: "sidebar"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "mode"; type: "string" }
        Property { name: "actions"; type: "Action_QMLTYPE_0"; isList: true; isReadonly: true }
        Property { name: "backAction"; type: "Action_QMLTYPE_0"; isPointer: true }
        Property { name: "backgroundColor"; type: "QColor" }
        Property { name: "canGoBack"; type: "bool" }
        Property { name: "rightSidebar"; type: "QQuickItem"; isPointer: true }
        Property { name: "selectedTab"; type: "int" }
        Property { name: "title"; type: "string" }
        Property { name: "tabs"; type: "QVariant" }
        Property { name: "actionBar"; type: "ActionBar_QMLTYPE_36"; isReadonly: true; isPointer: true }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Method { name: "pop"; type: "QVariant" }
        Method {
            name: "push"
            type: "QVariant"
            Parameter { name: "component"; type: "QVariant" }
            Parameter { name: "properties"; type: "QVariant" }
        }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "Material/PageStack"
        exports: ["Material/PageStack 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
        Property { name: "__lastDepth"; type: "int" }
        Property { name: "__oldItem"; type: "QQuickItem"; isPointer: true }
        Signal {
            name: "pushed"
            Parameter { name: "page"; type: "QQuickItem"; isPointer: true }
        }
        Signal { name: "popped" }
        Signal {
            name: "replaced"
            Parameter { name: "page"; type: "QQuickItem"; isPointer: true }
        }
        Property { name: "busy"; type: "bool"; isReadonly: true }
        Property { name: "delegate"; type: "StackViewDelegate_QMLTYPE_84"; isPointer: true }
        Property { name: "__currentItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "__depth"; type: "int" }
        Property { name: "__guard"; type: "bool" }
        Property { name: "invalidItemReplacement"; type: "QQmlComponent"; isPointer: true }
        Property { name: "initialItem"; type: "QVariant" }
        Property { name: "__currentTransition"; type: "QVariant" }
        Property { name: "depth"; type: "int"; isReadonly: true }
        Property { name: "currentItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Method {
            name: "push"
            type: "QVariant"
            Parameter { name: "item"; type: "QVariant" }
        }
        Method {
            name: "pop"
            type: "QVariant"
            Parameter { name: "item"; type: "QVariant" }
        }
        Method { name: "clear"; type: "QVariant" }
        Method {
            name: "find"
            type: "QVariant"
            Parameter { name: "func"; type: "QVariant" }
            Parameter { name: "onlySearchLoadedItems"; type: "QVariant" }
        }
        Method {
            name: "get"
            type: "QVariant"
            Parameter { name: "index"; type: "QVariant" }
            Parameter { name: "dontLoad"; type: "QVariant" }
        }
        Method { name: "completeTransition"; type: "QVariant" }
        Method {
            name: "replace"
            type: "QVariant"
            Parameter { name: "item"; type: "QVariant" }
            Parameter { name: "properties"; type: "QVariant" }
            Parameter { name: "immediate"; type: "QVariant" }
        }
        Method {
            name: "__recursionGuard"
            type: "QVariant"
            Parameter { name: "use"; type: "QVariant" }
        }
        Method {
            name: "__loadElement"
            type: "QVariant"
            Parameter { name: "element"; type: "QVariant" }
        }
        Method {
            name: "__resolveComponent"
            type: "QVariant"
            Parameter { name: "unknownObjectType"; type: "QVariant" }
            Parameter { name: "element"; type: "QVariant" }
        }
        Method {
            name: "__cleanup"
            type: "QVariant"
            Parameter { name: "element"; type: "QVariant" }
        }
        Method {
            name: "__setStatus"
            type: "QVariant"
            Parameter { name: "item"; type: "QVariant" }
            Parameter { name: "status"; type: "QVariant" }
        }
        Method {
            name: "__performTransition"
            type: "QVariant"
            Parameter { name: "transition"; type: "QVariant" }
        }
        Method { name: "animationFinished"; type: "QVariant" }
    }
    Component {
        prototype: "QObject"
        name: "Material/Palette"
        exports: ["Material/Palette 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        isCreatable: false
        isSingleton: true
        defaultProperty: "children"
        Property { name: "colors"; type: "QVariant" }
        Property { name: "__childrenFix"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "children"; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "Material/PopupBase"
        exports: ["Material/PopupBase 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
        Property { name: "overlayColor"; type: "QColor" }
        Property { name: "overlayLayer"; type: "string" }
        Property { name: "globalMouseAreaEnabled"; type: "bool" }
        Property { name: "dismissOnTap"; type: "bool" }
        Property { name: "showing"; type: "bool" }
        Property { name: "__lastFocusedItem"; type: "QQuickItem"; isPointer: true }
        Signal { name: "opened" }
        Signal { name: "closed" }
        Method {
            name: "toggle"
            type: "QVariant"
            Parameter { name: "widget"; type: "QVariant" }
        }
        Method { name: "open"; type: "QVariant" }
        Method { name: "close"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "Material/ProgressBar"
        exports: ["Material/ProgressBar 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
        Property { name: "color"; type: "QColor" }
        Property { name: "value"; type: "double" }
        Property { name: "minimumValue"; type: "double" }
        Property { name: "maximumValue"; type: "double" }
        Property { name: "indeterminate"; type: "bool" }
        Property { name: "orientation"; type: "int" }
        Property { name: "__initialized"; type: "bool" }
        Property { name: "hovered"; type: "bool"; isReadonly: true }
        Method {
            name: "setValue"
            type: "QVariant"
            Parameter { name: "v"; type: "QVariant" }
        }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__style"; type: "QObject"; isPointer: true }
        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
        Property { name: "styleHints"; type: "QVariant" }
        Property { name: "__styleData"; type: "QObject"; isPointer: true }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "Material/ProgressCircle"
        exports: ["Material/ProgressCircle 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
        Property { name: "color"; type: "QColor" }
        Property { name: "dashThickness"; type: "double" }
        Property { name: "value"; type: "double" }
        Property { name: "minimumValue"; type: "double" }
        Property { name: "maximumValue"; type: "double" }
        Property { name: "indeterminate"; type: "bool" }
        Property { name: "orientation"; type: "int" }
        Property { name: "__initialized"; type: "bool" }
        Property { name: "hovered"; type: "bool"; isReadonly: true }
        Method {
            name: "setValue"
            type: "QVariant"
            Parameter { name: "v"; type: "QVariant" }
        }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__style"; type: "QObject"; isPointer: true }
        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
        Property { name: "styleHints"; type: "QVariant" }
        Property { name: "__styleData"; type: "QObject"; isPointer: true }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "Material/RadioButton"
        exports: ["Material/RadioButton 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
        Property { name: "color"; type: "QColor" }
        Property { name: "darkBackground"; type: "bool" }
        Property { name: "canToggle"; type: "bool" }
        Property { name: "checked"; type: "bool" }
        Property { name: "activeFocusOnPress"; type: "bool" }
        Property { name: "exclusiveGroup"; type: "QQuickExclusiveGroup"; isPointer: true }
        Property { name: "text"; type: "string" }
        Property { name: "__cycleStatesHandler"; type: "QVariant" }
        Property { name: "pressed"; type: "bool" }
        Property { name: "hovered"; type: "bool"; isReadonly: true }
        Signal { name: "clicked" }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__style"; type: "QObject"; isPointer: true }
        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
        Property { name: "styleHints"; type: "QVariant" }
        Property { name: "__styleData"; type: "QObject"; isPointer: true }
    }
    Component {
        prototype: "QQuickItem"
        name: "Material/Scrollbar"
        exports: ["Material/Scrollbar 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
        Property { name: "flickableItem"; type: "QQuickFlickable"; isPointer: true }
        Property { name: "orientation"; type: "int" }
        Property { name: "thickness"; type: "int" }
        Property { name: "moving"; type: "bool" }
    }
    Component {
        prototype: "QQuickItem"
        name: "Material/Sidebar"
        exports: ["Material/Sidebar 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "contents"
        Property { name: "expanded"; type: "bool" }
        Property { name: "mode"; type: "string" }
        Property { name: "borderColor"; type: "QColor" }
        Property { name: "autoFlick"; type: "bool" }
        Property { name: "header"; type: "string" }
        Property { name: "contents"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "elevation"; type: "int" }
        Property { name: "radius"; type: "double" }
        Property { name: "style"; type: "string" }
        Property { name: "backgroundColor"; type: "QColor" }
        Property { name: "tintColor"; type: "QColor" }
        Property { name: "fullWidth"; type: "bool" }
        Property { name: "fullHeight"; type: "bool" }
        Property { name: "elevationInverted"; type: "bool" }
        Property { name: "topShadow"; type: "QVariant" }
        Property { name: "bottomShadow"; type: "QVariant" }
        Property { name: "border"; type: "QQuickPen"; isReadonly: true; isPointer: true }
        Property { name: "clipContent"; type: "bool" }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "Material/Slider"
        exports: ["Material/Slider 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
        Property { name: "numericValueLabel"; type: "bool" }
        Property { name: "darkBackground"; type: "bool" }
        Property { name: "color"; type: "QColor" }
        Property { name: "orientation"; type: "int" }
        Property { name: "updateValueWhileDragging"; type: "bool" }
        Property { name: "activeFocusOnPress"; type: "bool" }
        Property { name: "tickmarksEnabled"; type: "bool" }
        Property { name: "__horizontal"; type: "bool" }
        Property { name: "__handlePos"; type: "double" }
        Property { name: "minimumValue"; type: "double" }
        Property { name: "maximumValue"; type: "double" }
        Property { name: "pressed"; type: "bool"; isReadonly: true }
        Property { name: "hovered"; type: "bool"; isReadonly: true }
        Property { name: "stepSize"; type: "double" }
        Property { name: "value"; type: "double" }
        Method { name: "accessibleIncreaseAction"; type: "QVariant" }
        Method { name: "accessibleDecreaseAction"; type: "QVariant" }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__style"; type: "QObject"; isPointer: true }
        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
        Property { name: "styleHints"; type: "QVariant" }
        Property { name: "__styleData"; type: "QObject"; isPointer: true }
    }
    Component {
        prototype: "QQuickItem"
        name: "Material/Snackbar"
        exports: ["Material/Snackbar 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
        Property { name: "buttonText"; type: "string" }
        Property { name: "buttonColor"; type: "QColor" }
        Property { name: "text"; type: "string" }
        Property { name: "opened"; type: "bool" }
        Property { name: "duration"; type: "int" }
        Property { name: "fullWidth"; type: "bool" }
        Signal { name: "clicked" }
        Method {
            name: "open"
            type: "QVariant"
            Parameter { name: "text"; type: "QVariant" }
        }
        Property { name: "elevation"; type: "int" }
        Property { name: "radius"; type: "double" }
        Property { name: "style"; type: "string" }
        Property { name: "backgroundColor"; type: "QColor" }
        Property { name: "tintColor"; type: "QColor" }
        Property { name: "fullHeight"; type: "bool" }
        Property { name: "elevationInverted"; type: "bool" }
        Property { name: "topShadow"; type: "QVariant" }
        Property { name: "bottomShadow"; type: "QVariant" }
        Property { name: "border"; type: "QQuickPen"; isReadonly: true; isPointer: true }
        Property { name: "clipContent"; type: "bool" }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "Material/Switch"
        exports: ["Material/Switch 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
        Property { name: "color"; type: "QColor" }
        Property { name: "darkBackground"; type: "bool" }
        Property { name: "checked"; type: "bool" }
        Property { name: "activeFocusOnPress"; type: "bool" }
        Property { name: "exclusiveGroup"; type: "QQuickExclusiveGroup"; isPointer: true }
        Property { name: "pressed"; type: "bool"; isReadonly: true }
        Signal { name: "clicked" }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__style"; type: "QObject"; isPointer: true }
        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
        Property { name: "styleHints"; type: "QVariant" }
        Property { name: "__styleData"; type: "QObject"; isPointer: true }
    }
    Component {
        prototype: "QQuickListView"
        name: "Material/TabView"
        exports: ["Material/TabView 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
    }
    Component {
        prototype: "QQuickRow"
        name: "Material/Tabs"
        exports: ["Material/Tabs 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
        Property { name: "selectedIndex"; type: "int" }
        Property { name: "darkBackground"; type: "bool" }
        Property { name: "color"; type: "QColor" }
        Property { name: "highlightColor"; type: "QColor" }
        Property { name: "textColor"; type: "QColor" }
        Property { name: "tabs"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "Material/TextField"
        exports: ["Material/TextField 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
        Property { name: "color"; type: "QColor" }
        Property { name: "errorColor"; type: "QColor" }
        Property { name: "helperText"; type: "string" }
        Property { name: "floatingLabel"; type: "bool" }
        Property { name: "hasError"; type: "bool" }
        Property { name: "characterLimit"; type: "int" }
        Property { name: "inputMethodComposing"; type: "bool"; isReadonly: true }
        Property { name: "selectByMouse"; type: "bool" }
        Property { name: "menu"; type: "QQmlComponent"; isPointer: true }
        Property { name: "acceptableInput"; type: "bool"; isReadonly: true }
        Property { name: "activeFocusOnPress"; type: "bool" }
        Property { name: "canPaste"; type: "bool"; isReadonly: true }
        Property { name: "canRedo"; type: "bool"; isReadonly: true }
        Property { name: "canUndo"; type: "bool"; isReadonly: true }
        Property { name: "textColor"; type: "QColor" }
        Property { name: "cursorPosition"; type: "int" }
        Property { name: "cursorRectangle"; type: "QRectF"; isReadonly: true }
        Property { name: "displayText"; type: "string"; isReadonly: true }
        Property { name: "echoMode"; type: "int" }
        Property { name: "font"; type: "QFont" }
        Property { name: "horizontalAlignment"; type: "int" }
        Property { name: "effectiveHorizontalAlignment"; type: "int"; isReadonly: true }
        Property { name: "verticalAlignment"; type: "int" }
        Property { name: "inputMask"; type: "string" }
        Property { name: "inputMethodHints"; type: "int" }
        Property { name: "length"; type: "int"; isReadonly: true }
        Property { name: "maximumLength"; type: "int" }
        Property { name: "placeholderText"; type: "string" }
        Property { name: "readOnly"; type: "bool" }
        Property { name: "selectedText"; type: "string"; isReadonly: true }
        Property { name: "selectionEnd"; type: "int"; isReadonly: true }
        Property { name: "selectionStart"; type: "int"; isReadonly: true }
        Property { name: "text"; type: "string" }
        Property { name: "validator"; type: "QValidator"; isPointer: true }
        Property { name: "hovered"; type: "bool"; isReadonly: true }
        Property { name: "__contentHeight"; type: "double"; isReadonly: true }
        Property { name: "__contentWidth"; type: "double"; isReadonly: true }
        Property { name: "__baselineOffset"; type: "double" }
        Signal { name: "accepted" }
        Signal { name: "editingFinished" }
        Method { name: "copy"; type: "QVariant" }
        Method { name: "cut"; type: "QVariant" }
        Method { name: "deselect"; type: "QVariant" }
        Method {
            name: "getText"
            type: "QVariant"
            Parameter { name: "start"; type: "QVariant" }
            Parameter { name: "end"; type: "QVariant" }
        }
        Method {
            name: "insert"
            type: "QVariant"
            Parameter { name: "position"; type: "QVariant" }
            Parameter { name: "text"; type: "QVariant" }
        }
        Method {
            name: "isRightToLeft"
            type: "QVariant"
            Parameter { name: "start"; type: "QVariant" }
            Parameter { name: "end"; type: "QVariant" }
        }
        Method { name: "paste"; type: "QVariant" }
        Method { name: "redo"; type: "QVariant" }
        Method {
            name: "select"
            type: "QVariant"
            Parameter { name: "start"; type: "QVariant" }
            Parameter { name: "end"; type: "QVariant" }
        }
        Method { name: "selectAll"; type: "QVariant" }
        Method { name: "selectWord"; type: "QVariant" }
        Method { name: "undo"; type: "QVariant" }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__style"; type: "QObject"; isPointer: true }
        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
        Property { name: "styleHints"; type: "QVariant" }
        Property { name: "__styleData"; type: "QObject"; isPointer: true }
    }
    Component {
        prototype: "QObject"
        name: "Material/Theme"
        exports: ["Material/Theme 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        isCreatable: false
        isSingleton: true
        defaultProperty: "children"
        Property { name: "primaryColor"; type: "QColor" }
        Property { name: "primaryDarkColor"; type: "QColor" }
        Property { name: "accentColor"; type: "QColor" }
        Property { name: "backgroundColor"; type: "QColor" }
        Property { name: "tabHighlightColor"; type: "QColor" }
        Property { name: "light"; type: "ThemePalette_QMLTYPE_8"; isPointer: true }
        Property { name: "dark"; type: "ThemePalette_QMLTYPE_8"; isPointer: true }
        Method {
            name: "alpha"
            type: "QVariant"
            Parameter { name: "color"; type: "QVariant" }
            Parameter { name: "alpha"; type: "QVariant" }
        }
        Method {
            name: "lightDark"
            type: "QVariant"
            Parameter { name: "background"; type: "QVariant" }
            Parameter { name: "lightColor"; type: "QVariant" }
            Parameter { name: "darkColor"; type: "QVariant" }
        }
        Method {
            name: "isDarkColor"
            type: "QVariant"
            Parameter { name: "background"; type: "QVariant" }
        }
        Property { name: "__childrenFix"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "children"; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        prototype: "QObject"
        name: "Material/ThemePalette"
        exports: ["Material/ThemePalette 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        Property { name: "light"; type: "bool" }
        Property { name: "textColor"; type: "QColor"; isReadonly: true }
        Property { name: "subTextColor"; type: "QColor"; isReadonly: true }
        Property { name: "iconColor"; type: "QColor"; isReadonly: true }
        Property { name: "hintColor"; type: "QColor"; isReadonly: true }
        Property { name: "dividerColor"; type: "QColor"; isReadonly: true }
        Property { name: "accentColor"; type: "QColor" }
        Method {
            name: "shade"
            type: "QVariant"
            Parameter { name: "alpha"; type: "QVariant" }
        }
    }
    Component {
        prototype: "QQuickRectangle"
        name: "Material/ThinDivider"
        exports: ["Material/ThinDivider 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
    }
    Component {
        prototype: "QQuickItem"
        name: "Material/Toolbar"
        exports: ["Material/Toolbar 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
        Property { name: "actionBarHeight"; type: "int" }
        Property { name: "targetHeight"; type: "int" }
        Property { name: "maxActionCount"; type: "int" }
        Property { name: "clientSideDecorations"; type: "bool" }
        Property { name: "color"; type: "string" }
        Property { name: "showBackButton"; type: "bool" }
        Property { name: "page"; type: "QVariant" }
        Property { name: "pages"; type: "QVariant" }
        Property { name: "tabs"; type: "QVariant" }
        Property { name: "selectedTab"; type: "int" }
        Method { name: "pop"; type: "QVariant" }
        Method {
            name: "push"
            type: "QVariant"
            Parameter { name: "page"; type: "QVariant" }
        }
        Method {
            name: "replace"
            type: "QVariant"
            Parameter { name: "page"; type: "QVariant" }
        }
        Property { name: "elevation"; type: "int" }
        Property { name: "radius"; type: "double" }
        Property { name: "style"; type: "string" }
        Property { name: "backgroundColor"; type: "QColor" }
        Property { name: "tintColor"; type: "QColor" }
        Property { name: "fullWidth"; type: "bool" }
        Property { name: "fullHeight"; type: "bool" }
        Property { name: "elevationInverted"; type: "bool" }
        Property { name: "topShadow"; type: "QVariant" }
        Property { name: "bottomShadow"; type: "QVariant" }
        Property { name: "border"; type: "QQuickPen"; isReadonly: true; isPointer: true }
        Property { name: "clipContent"; type: "bool" }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "Material/Tooltip"
        exports: ["Material/Tooltip 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
        Property { name: "mouseArea"; type: "QQuickMouseArea"; isPointer: true }
        Property { name: "text"; type: "string" }
        Method {
            name: "open"
            type: "QVariant"
            Parameter { name: "caller"; type: "QVariant" }
            Parameter { name: "offsetX"; type: "QVariant" }
            Parameter { name: "offsetY"; type: "QVariant" }
        }
        Method { name: "close"; type: "QVariant" }
        Property { name: "overlayColor"; type: "QColor" }
        Property { name: "overlayLayer"; type: "string" }
        Property { name: "globalMouseAreaEnabled"; type: "bool" }
        Property { name: "dismissOnTap"; type: "bool" }
        Property { name: "showing"; type: "bool" }
        Property { name: "__lastFocusedItem"; type: "QQuickItem"; isPointer: true }
        Signal { name: "opened" }
        Signal { name: "closed" }
        Method {
            name: "toggle"
            type: "QVariant"
            Parameter { name: "widget"; type: "QVariant" }
        }
        Method { name: "open"; type: "QVariant" }
    }
    Component {
        prototype: "QObject"
        name: "Material/Units"
        exports: ["Material/Units 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        isCreatable: false
        isSingleton: true
        defaultProperty: "children"
        Property { name: "pixelDensity"; type: "double" }
        Property { name: "multiplier"; type: "double" }
        Property { name: "gridUnit"; type: "int" }
        Method {
            name: "dp"
            type: "QVariant"
            Parameter { name: "number"; type: "QVariant" }
        }
        Method {
            name: "gu"
            type: "QVariant"
            Parameter { name: "number"; type: "QVariant" }
        }
        Property { name: "__childrenFix"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "children"; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        prototype: "QQuickItem"
        name: "Material/View"
        exports: ["Material/View 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
        Property { name: "elevation"; type: "int" }
        Property { name: "radius"; type: "double" }
        Property { name: "style"; type: "string" }
        Property { name: "backgroundColor"; type: "QColor" }
        Property { name: "tintColor"; type: "QColor" }
        Property { name: "fullWidth"; type: "bool" }
        Property { name: "fullHeight"; type: "bool" }
        Property { name: "elevationInverted"; type: "bool" }
        Property { name: "topShadow"; type: "QVariant" }
        Property { name: "bottomShadow"; type: "QVariant" }
        Property { name: "border"; type: "QQuickPen"; isReadonly: true; isPointer: true }
        Property { name: "clipContent"; type: "bool" }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        prototype: "QQuickRectangle"
        name: "Material/Wave"
        exports: ["Material/Wave 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
        Property { name: "opened"; type: "bool" }
        Property { name: "size"; type: "double" }
        Property { name: "initialX"; type: "double" }
        Property { name: "initialY"; type: "double" }
        Property { name: "abstractWidth"; type: "double" }
        Property { name: "abstractHeight"; type: "double" }
        Property { name: "diameter"; type: "double" }
        Signal {
            name: "finished"
            Parameter { name: "opened"; type: "bool" }
        }
        Method {
            name: "open"
            type: "QVariant"
            Parameter { name: "x"; type: "QVariant" }
            Parameter { name: "y"; type: "QVariant" }
        }
        Method {
            name: "close"
            type: "QVariant"
            Parameter { name: "x"; type: "QVariant" }
            Parameter { name: "y"; type: "QVariant" }
        }
    }
    Component {
        prototype: "QObject"
        name: "Material/Window"
        exports: ["Material/Window 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
        Property { name: "theme"; type: "AppTheme_QMLTYPE_82"; isReadonly: true; isPointer: true }
        Property { name: "visible"; type: "bool" }
        Property { name: "visibility"; type: "Visibility" }
        Signal {
            name: "visibleChanged"
            Parameter { name: "arg"; type: "bool" }
        }
        Signal {
            name: "visibilityChanged"
            Parameter { name: "visibility"; type: "QWindow::Visibility" }
        }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "color"; type: "QColor" }
        Property { name: "contentItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property {
            name: "activeFocusItem"
            revision: 1
            type: "QQuickItem"
            isReadonly: true
            isPointer: true
        }
        Signal { name: "frameSwapped" }
        Signal {
            name: "openglContextCreated"
            revision: 2
            Parameter { name: "context"; type: "QOpenGLContext"; isPointer: true }
        }
        Signal { name: "sceneGraphInitialized" }
        Signal { name: "sceneGraphInvalidated" }
        Signal { name: "beforeSynchronizing" }
        Signal { name: "afterSynchronizing"; revision: 2 }
        Signal { name: "beforeRendering" }
        Signal { name: "afterRendering" }
        Signal { name: "afterAnimating"; revision: 2 }
        Signal { name: "sceneGraphAboutToStop"; revision: 2 }
        Signal {
            name: "closing"
            revision: 1
            Parameter { name: "close"; type: "QQuickCloseEvent"; isPointer: true }
        }
        Signal {
            name: "colorChanged"
            Parameter { type: "QColor" }
        }
        Signal {
            name: "sceneGraphError"
            revision: 2
            Parameter { name: "error"; type: "QQuickWindow::SceneGraphError" }
            Parameter { name: "message"; type: "string" }
        }
        Method { name: "update" }
        Method { name: "releaseResources" }
        Property { name: "title"; type: "string" }
        Property { name: "modality"; type: "Qt::WindowModality" }
        Property { name: "flags"; type: "Qt::WindowFlags" }
        Property { name: "x"; type: "int" }
        Property { name: "y"; type: "int" }
        Property { name: "width"; type: "int" }
        Property { name: "height"; type: "int" }
        Property { name: "minimumWidth"; type: "int" }
        Property { name: "minimumHeight"; type: "int" }
        Property { name: "maximumWidth"; type: "int" }
        Property { name: "maximumHeight"; type: "int" }
        Property { name: "active"; revision: 1; type: "bool"; isReadonly: true }
        Property { name: "contentOrientation"; type: "Qt::ScreenOrientation" }
        Property { name: "opacity"; revision: 1; type: "double" }
        Signal {
            name: "screenChanged"
            Parameter { name: "screen"; type: "QScreen"; isPointer: true }
        }
        Signal {
            name: "modalityChanged"
            Parameter { name: "modality"; type: "Qt::WindowModality" }
        }
        Signal {
            name: "windowStateChanged"
            Parameter { name: "windowState"; type: "Qt::WindowState" }
        }
        Signal {
            name: "windowTitleChanged"
            revision: 2
            Parameter { name: "title"; type: "string" }
        }
        Signal {
            name: "xChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "yChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "widthChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "heightChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "minimumWidthChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "minimumHeightChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "maximumWidthChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "maximumHeightChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "contentOrientationChanged"
            Parameter { name: "orientation"; type: "Qt::ScreenOrientation" }
        }
        Signal {
            name: "focusObjectChanged"
            Parameter { name: "object"; type: "QObject"; isPointer: true }
        }
        Signal {
            name: "opacityChanged"
            revision: 1
            Parameter { name: "opacity"; type: "double" }
        }
        Method { name: "requestActivate"; revision: 1 }
        Method {
            name: "setVisible"
            Parameter { name: "visible"; type: "bool" }
        }
        Method { name: "show" }
        Method { name: "hide" }
        Method { name: "showMinimized" }
        Method { name: "showMaximized" }
        Method { name: "showFullScreen" }
        Method { name: "showNormal" }
        Method { name: "close"; type: "bool" }
        Method { name: "raise" }
        Method { name: "lower" }
        Method {
            name: "setTitle"
            Parameter { type: "string" }
        }
        Method {
            name: "setX"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setY"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setWidth"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setHeight"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setMinimumWidth"
            Parameter { name: "w"; type: "int" }
        }
        Method {
            name: "setMinimumHeight"
            Parameter { name: "h"; type: "int" }
        }
        Method {
            name: "setMaximumWidth"
            Parameter { name: "w"; type: "int" }
        }
        Method {
            name: "setMaximumHeight"
            Parameter { name: "h"; type: "int" }
        }
        Method {
            name: "alert"
            revision: 1
            Parameter { name: "msec"; type: "int" }
        }
    }
}
